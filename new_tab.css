/* new_tab.css - Enhanced version with improved responsive design and accessibility */

/* CSS Custom Properties for better maintainability */
:root {
    --gradient-start: #F5F7FA;
    --gradient-end: #E0E5EC;
    --category-title-font-size: 16px;
    --site-name-font-size: 10px;
    --favicon-wrapper-size: 38px;
    --card-min-width-js: 70px;
    --category-content-max-width: 100%;
    
    /* Color scheme */
    --primary-color: #007AFF;
    --secondary-color: #2c3e50;
    --text-color: #333;
    --border-color: #e0e5ec;
    --card-background: rgba(255, 255, 255, 0.9);
    --hover-shadow: rgba(0, 0, 0, 0.04);
    
    /* Spacing */
    --container-padding: 20px 25px;
    --category-gap: 30px;
    --card-gap: 8px;
    --card-padding: 8px;
    --card-border-radius: 8px;
    
    /* Transitions */
    --transition-fast: 0.08s ease-out;
    --transition-medium: 0.2s ease;
    --transition-slow: 0.3s ease;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    :root {
        --gradient-start: #1a1a1a;
        --gradient-end: #2d2d2d;
        --text-color: #e0e0e0;
        --secondary-color: #a0a0a0;
        --border-color: #404040;
        --card-background: rgba(50, 50, 50, 0.9);
        --hover-shadow: rgba(255, 255, 255, 0.04);
    }
}

/* Base styles */
* {
    box-sizing: border-box;
}

body {
    margin: 0;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    background: var(--gradient-start) linear-gradient(135deg, var(--gradient-start) 0%, var(--gradient-end) 100%);
    background-attachment: fixed;
    color: var(--text-color);
    padding: var(--container-padding);
    overflow-y: auto;
    display: flex;
    justify-content: center;
    min-height: 100vh;
    line-height: 1.4;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/* Main container */
#main-content-wrapper {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
}

/* Categories container with improved grid */
#categories-container {
    width: 100%;
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--category-gap);
    align-items: flex-start;
    justify-content: center;
}

/* Category sections */
.category-section {
    margin-bottom: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    transition: transform var(--transition-medium);
}

.category-section:hover {
    transform: translateY(-2px);
}

/* Category titles with enhanced styling */
.category-title {
    font-size: var(--category-title-font-size);
    font-weight: 600;
    margin-bottom: 10px;
    color: var(--secondary-color);
    padding-bottom: 5px;
    border-bottom: 1px solid var(--border-color);
    position: relative;
    width: 100%;
    max-width: var(--category-content-max-width);
    text-align: left;
    letter-spacing: -0.01em;
}

.category-title::after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 0;
    width: 25px;
    height: 2px;
    background-color: var(--primary-color);
    border-radius: 1px;
}

/* Sites grid with improved responsiveness */
.sites-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--card-min-width-js), 1fr));
    gap: var(--card-gap);
    width: 100%;
    max-width: var(--category-content-max-width);
    justify-items: center;
}

/* Site cards with enhanced interactions */
.site-card {
    background-color: var(--card-background);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--card-border-radius);
    padding: var(--card-padding);
    text-align: center;
    text-decoration: none;
    color: inherit;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.03);
    transition: transform var(--transition-fast), 
                box-shadow var(--transition-fast),
                background-color var(--transition-medium);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: var(--card-min-width-js);
    overflow: hidden;
    position: relative;
    cursor: pointer;
    width: 100%;
    min-width: 0; /* Prevent grid overflow */
}

/* Enhanced hover effects */
.site-card:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 8px 20px var(--hover-shadow);
    background-color: rgba(255, 255, 255, 0.95);
}

.site-card:active {
    transform: translateY(0) scale(0.98);
    transition-duration: 0.05s;
}

/* Focus styles for accessibility */
.site-card:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
}

/* Favicon wrapper with improved styling */
.site-favicon-wrapper {
    width: var(--favicon-wrapper-size);
    height: var(--favicon-wrapper-size);
    margin-bottom: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(0, 0, 0, 0.02);
    border-radius: 6px;
    overflow: hidden;
    flex-shrink: 0;
    position: relative;
}

.site-favicon {
    width: 100%;
    height: 100%;
    object-fit: contain;
    image-rendering: optimizeQuality;
    transition: transform var(--transition-medium);
}

.site-card:hover .site-favicon {
    transform: scale(1.1);
}

/* Loading state for favicons */
.site-favicon.loading {
    opacity: 0.5;
}

.site-favicon.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 16px;
    height: 16px;
    margin: -8px 0 0 -8px;
    border: 2px solid transparent;
    border-top: 2px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Site names with improved typography */
.site-name {
    font-size: var(--site-name-font-size);
    font-weight: 500;
    color: var(--secondary-color);
    word-break: break-word;
    line-height: 1.2;
    max-height: 2.4em; /* Allow for two lines */
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    hyphens: auto;
}

/* Enhanced context menu */
.custom-context-menu {
    display: none;
    position: absolute;
    background-color: var(--card-background);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    padding: 6px 0;
    z-index: 1000;
    font-size: 14px;
    min-width: 160px;
    animation: contextMenuFadeIn 0.2s ease-out;
}

@keyframes contextMenuFadeIn {
    from {
        opacity: 0;
        transform: translateY(-8px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.context-menu-item {
    padding: 10px 16px;
    cursor: pointer;
    color: var(--text-color);
    transition: background-color var(--transition-medium);
    display: flex;
    align-items: center;
    gap: 8px;
}

.context-menu-item:hover {
    background-color: rgba(0, 122, 255, 0.1);
}

.context-menu-item:active {
    background-color: rgba(0, 122, 255, 0.2);
}

/* Enhanced modal styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1001;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.6);
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
    animation: modalFadeIn 0.3s ease-out;
}

@keyframes modalFadeIn {
    from {
        opacity: 0;
        backdrop-filter: blur(0px);
    }
    to {
        opacity: 1;
        backdrop-filter: blur(4px);
    }
}

.modal-content {
    background-color: var(--card-background);
    margin: auto;
    padding: 30px;
    border: 1px solid var(--border-color);
    width: 90%;
    max-width: 480px;
    border-radius: 12px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    position: relative;
    animation: modalSlideIn 0.3s ease-out;
}

@keyframes modalSlideIn {
    from {
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.modal-close-button {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    line-height: 1;
    cursor: pointer;
    transition: color var(--transition-medium);
    padding: 4px;
    margin: -4px;
}

.modal-close-button:hover,
.modal-close-button:focus {
    color: var(--text-color);
    outline: none;
}

.modal h2 {
    margin-top: 0;
    font-size: 20px;
    color: var(--text-color);
    margin-bottom: 16px;
    font-weight: 600;
}

.modal p {
    font-size: 14px;
    color: var(--secondary-color);
    margin-bottom: 20px;
    line-height: 1.5;
}

.modal input[type="url"] {
    width: 100%;
    padding: 12px 16px;
    margin-bottom: 24px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    font-size: 14px;
    background-color: var(--card-background);
    color: var(--text-color);
    transition: border-color var(--transition-medium), box-shadow var(--transition-medium);
    box-sizing: border-box;
}

.modal input[type="url"]:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
}

.modal-actions {
    text-align: right;
    margin-top: 20px;
    display: flex;
    gap: 12px;
    justify-content: flex-end;
}

.modal-actions .button {
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    border: none;
    transition: background-color var(--transition-medium), transform var(--transition-fast);
}

.modal-actions .button:hover {
    transform: translateY(-1px);
}

.modal-actions .button:active {
    transform: translateY(0);
}

.modal-actions .primary-button {
    background-color: var(--primary-color);
    color: white;
}

.modal-actions .primary-button:hover {
    background-color: #005ecb;
}

.modal-actions .secondary-button {
    background-color: #6c757d;
    color: white;
}

.modal-actions .secondary-button:hover {
    background-color: #5a6268;
}

/* Welcome message styling */
.welcome-container {
    text-align: center;
    padding: 80px 40px;
    color: var(--secondary-color);
    background-color: var(--card-background);
    border-radius: 18px;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.08);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    max-width: 600px;
    margin: 0 auto;
}

.welcome-container h2 {
    font-size: 28px;
    font-weight: 600;
    color: var(--secondary-color);
    margin-bottom: 16px;
    letter-spacing: -0.02em;
}

.welcome-container p {
    font-size: 16px;
    line-height: 1.6;
    margin-bottom: 12px;
    opacity: 0.8;
}

.welcome-container a {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
    border-bottom: 1px solid transparent;
    transition: border-color var(--transition-medium);
}

.welcome-container a:hover {
    border-bottom-color: var(--primary-color);
}

/* Responsive design improvements */
@media (max-width: 1200px) {
    #categories-container {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 799px) {
    :root {
        --category-gap: 20px;
        --container-padding: 15px 20px;
    }
    
    .category-title {
        font-size: calc(var(--category-title-font-size) * 0.9);
        margin-bottom: 8px;
    }
    
    .sites-grid {
        gap: 6px;
        grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
    }
    
    .site-card {
        padding: 6px;
        border-radius: 6px;
    }
    
    .welcome-container {
        padding: 60px 30px;
    }
    
    .welcome-container h2 {
        font-size: 24px;
    }
}

@media (max-width: 480px) {
    :root {
        --container-padding: 12px 16px;
        --category-gap: 16px;
    }
    
    .category-title {
        font-size: calc(var(--category-title-font-size) * 0.8);
        margin-bottom: 6px;
    }
    
    .sites-grid {
        gap: 4px;
        grid-template-columns: repeat(auto-fill, minmax(55px, 1fr));
    }
    
    .site-card {
        padding: 4px;
        border-radius: 4px;
    }
    
    .site-name {
        font-size: calc(var(--site-name-font-size) * 0.9);
    }
    
    .welcome-container {
        padding: 40px 20px;
    }
    
    .welcome-container h2 {
        font-size: 22px;
    }
    
    .welcome-container p {
        font-size: 15px;
    }
    
    .modal-content {
        padding: 20px;
        margin: 20px;
    }
    
    .modal-actions {
        flex-direction: column;
    }
    
    .modal-actions .button {
        width: 100%;
        margin-bottom: 8px;
    }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
    .site-card {
        border: 2px solid var(--border-color);
    }
    
    .site-card:hover {
        border-color: var(--primary-color);
    }
    
    .custom-context-menu {
        border: 2px solid var(--border-color);
    }
    
    .modal-content {
        border: 2px solid var(--border-color);
    }
}

/* Print styles */
@media print {
    body {
        background: white !important;
        color: black !important;
    }
    
    .custom-context-menu,
    .modal {
        display: none !important;
    }
    
    .site-card {
        break-inside: avoid;
        background: white !important;
        border: 1px solid #ccc !important;
    }
}

/* Performance optimizations */
.site-card,
.site-favicon,
.category-section {
    will-change: transform;
}

/* Ensure smooth scrolling */
html {
    scroll-behavior: smooth;
}

@media (prefers-reduced-motion: reduce) {
    html {
        scroll-behavior: auto;
    }
}

/* Loading states */
.loading-skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
}

@keyframes loading {
    0% {
        background-position: 200% 0;
    }
    100% {
        background-position: -200% 0;
    }
}

/* Error states */
.error-state {
    color: #dc3545;
    text-align: center;
    padding: 20px;
    background-color: rgba(220, 53, 69, 0.1);
    border-radius: 8px;
    margin: 20px 0;
}

/* Success states */
.success-state {
    color: #28a745;
    text-align: center;
    padding: 20px;
    background-color: rgba(40, 167, 69, 0.1);
    border-radius: 8px;
    margin: 20px 0;
}
```

---

## 📄 **new_tab.js** (Enhanced with Better Error Handling)
```javascript
// new_tab.js - Enhanced version with better error handling and URL parsing
document.addEventListener('DOMContentLoaded', async () => {
    const categoriesContainer = document.getElementById('categories-container');
    const bodyElement = document.body; 
    let settings = {};
    let appDataForDisplay = { categories: [], categoryOrder: [] }; 

    // For context menu and modal
    const customContextMenu = document.getElementById('custom-context-menu');
    const setCustomIconCtxItem = document.getElementById('set-custom-icon-ctx');
    const customIconModal = document.getElementById('custom-icon-modal');
    const modalCloseBtn = document.getElementById('modal-close-btn'); 
    const modalSaveIconBtn = document.getElementById('modal-save-icon-btn');
    const modalCancelIconBtn = document.getElementById('modal-cancel-icon-btn');
    const customIconUrlInput = document.getElementById('custom-icon-url-input');
    let currentSiteForModal = null; 

    // Default values as constants
    const DEFAULT_SETTINGS = {
        maxCategoriesPerRow: '2', 
        maxSiteCardsPerRow: '5',  
        cardMinWidth: '70px', 
        categoryTitleFontSize: '16px', 
        siteNameFontSize: '10px',   
        faviconWrapperSize: '38px', 
        gradientStartColor: '#F5F7FA', 
        gradientEndColor: '#E0E5EC'  
    };

    const DEFAULT_APP_DATA = {
        categories: [], 
        categoryOrder: []
    };

    console.log("NovaTab: Starting enhanced new_tab.js script...");

    // Improved URL parsing and hostname extraction
    function getEffectiveHostname(url) {
        if (!url || typeof url !== 'string') {
            console.warn('NovaTab: Invalid URL provided to getEffectiveHostname:', url);
            return 'example.com';
        }

        try {
            // Ensure URL has protocol
            const urlToProcess = url.match(/^https?:\/\//) ? url : `https://${url}`;
            const urlObj = new URL(urlToProcess);
            
            if (!urlObj.hostname || urlObj.hostname === 'localhost') {
                return urlObj.hostname || 'localhost';
            }

            const parts = urlObj.hostname.split('.');
            
            // For single part hostnames (like localhost)
            if (parts.length === 1) {
                return urlObj.hostname;
            }
            
            // For two parts (like google.com)
            if (parts.length === 2) {
                return urlObj.hostname;
            }

            // For three or more parts, try to get the domain
            // Handle common country code TLDs (co.uk, com.au, etc.)
            const commonCcTlds = ['co', 'com', 'org', 'gov', 'net', 'edu', 'ac'];
            const lastPart = parts[parts.length - 1];
            const secondLastPart = parts[parts.length - 2];
            
            if (parts.length >= 3 && lastPart.length === 2 && commonCcTlds.includes(secondLastPart)) {
                // Handle cases like amazon.co.uk
                return parts.slice(-3).join('.');
            }
            
            // Default to last two parts (domain.tld)
            return parts.slice(-2).join('.');
            
        } catch (error) {
            console.warn(`NovaTab: Error parsing URL "${url}":`, error.message);
            return 'example.com';
        }
    }

    // Improved favicon URL generation
    function getFaviconUrl(site) {
        if (site.customIconUrl) {
            return site.customIconUrl;
        }

        if (!site.url) {
            return 'icons/default_favicon.png';
        }

        const hostname = getEffectiveHostname(site.url);
        if (hostname === 'example.com') {
            return 'icons/default_favicon.png';
        }

        return `https://www.google.com/s2/favicons?domain=${encodeURIComponent(hostname)}&sz=64`;
    }

    // Debounced loading function for better performance
    let loadingTimeout = null;
    async function debouncedLoadAndRender() {
        if (loadingTimeout) {
            clearTimeout(loadingTimeout);
        }
        
        loadingTimeout = setTimeout(async () => {
            await loadAndRender();
        }, 100);
    }

    async function loadAndRender() {
        try {
            const result = await chrome.storage.local.get(['appSettings', 'activeDisplayData']);
            
            settings = { ...DEFAULT_SETTINGS };
            if (result.appSettings) {
                Object.keys(DEFAULT_SETTINGS).forEach(key => {
                    if (result.appSettings[key] !== undefined) {
                        settings[key] = result.appSettings[key];
                    }
                });
            }
            
            if (result.activeDisplayData && Array.isArray(result.activeDisplayData.categories)) {
                appDataForDisplay = result.activeDisplayData;
            } else {
                appDataForDisplay = { ...DEFAULT_APP_DATA };
            }
        } catch (error) {
            console.error("NovaTab: Error loading data:", error);
            showErrorMessage("Failed to load settings. Using defaults.");
            settings = { ...DEFAULT_SETTINGS };
            appDataForDisplay = { ...DEFAULT_APP_DATA };
        }

        applySettingsToDOM();
        renderPageContent();
    }

    function applySettingsToDOM() {
        // Apply CSS custom properties
        Object.entries({
            '--gradient-start': settings.gradientStartColor,
            '--gradient-end': settings.gradientEndColor,
            '--category-title-font-size': settings.categoryTitleFontSize,
            '--site-name-font-size': settings.siteNameFontSize,
            '--favicon-wrapper-size': settings.faviconWrapperSize
        }).forEach(([property, value]) => {
            bodyElement.style.setProperty(property, value);
        });

        if (categoriesContainer) {
            const maxCatCols = parseInt(settings.maxCategoriesPerRow) || 2;
            if (maxCatCols > 1) {
                categoriesContainer.style.gridTemplateColumns = `repeat(${maxCatCols}, auto)`;
                categoriesContainer.style.justifyContent = 'center'; 
            } else {
                categoriesContainer.style.gridTemplateColumns = '1fr'; 
                categoriesContainer.style.justifyContent = 'initial'; 
            }
        }
    }

    function showErrorMessage(message) {
        console.error("NovaTab:", message);
        // Could be enhanced to show user-visible error messages
    }

    function renderPageContent() {
        if (!categoriesContainer) { 
            console.error("NovaTab: categoriesContainer not found. Cannot render.");
            return;
        }

        categoriesContainer.innerHTML = ''; 

        if (!appDataForDisplay?.categories?.length) {
            renderWelcomeMessage();
            return;
        }

        const orderedCategories = getOrderedCategories();
        orderedCategories.forEach(category => renderCategory(category));
    }

    function renderWelcomeMessage() {
        categoriesContainer.innerHTML = `
            <div class="welcome-container">
                <h2>Welcome to NovaTab!</h2>
                <p>Your beautiful new tab page is ready to be personalized.</p>
                <p>
                    Please <a href="${chrome.runtime.getURL('options.html')}" target="_blank">open the settings</a> to add your favorite websites or connect a bookmark folder.
                </p>
            </div>`;
    }

    function getOrderedCategories() {
        if (!appDataForDisplay.categories) return [];
        
        const categoryMap = new Map(appDataForDisplay.categories.map(cat => [cat.id, cat]));
        const orderedCategories = [];

        if (appDataForDisplay.categoryOrder?.length) {
            // Add categories in specified order
            appDataForDisplay.categoryOrder.forEach(catId => {
                if (categoryMap.has(catId)) {
                    orderedCategories.push(categoryMap.get(catId));
                }
            });
            
            // Add any remaining categories not in the order
            appDataForDisplay.categories.forEach(cat => {
                if (!appDataForDisplay.categoryOrder.includes(cat.id)) {
                    orderedCategories.push(cat);
                }
            });
        } else {
            orderedCategories.push(...appDataForDisplay.categories);
        }

        return orderedCategories.filter(cat => cat?.sites?.length > 0);
    }

    function renderCategory(category) {
        const categorySection = document.createElement('div');
        categorySection.className = 'category-section';
        
        const categoryTitleElement = document.createElement('h2');
        categoryTitleElement.className = 'category-title';
        categoryTitleElement.textContent = category.name;
        categorySection.appendChild(categoryTitleElement);
        
        const sitesGrid = document.createElement('div');
        sitesGrid.className = 'sites-grid';
        
        // Apply grid settings
        const cardMinWidthFromSettings = settings.cardMinWidth || '70px'; 
        sitesGrid.style.setProperty('--card-min-width-js', cardMinWidthFromSettings);
        
        const siteGridItemGap = 8; 
        const maxSiteCols = parseInt(settings.maxSiteCardsPerRow) || 5; 
        const cardWidthNum = parseInt(cardMinWidthFromSettings.replace('px', ''));

        let calculatedContentMaxWidth = '100%'; 
        if (!isNaN(cardWidthNum) && cardWidthNum > 0) {
            calculatedContentMaxWidth = `${(maxSiteCols * cardWidthNum) + ((maxSiteCols - 1) * siteGridItemGap)}px`;
        }
        categorySection.style.setProperty('--category-content-max-width', calculatedContentMaxWidth);
        
        // Sort sites alphabetically
        const sortedSites = [...category.sites].sort((a, b) => a.name.localeCompare(b.name));
        sortedSites.forEach(site => {
            const siteCard = createSiteCard(site, category);
            sitesGrid.appendChild(siteCard);
        });
        
        categorySection.appendChild(sitesGrid);
        categoriesContainer.appendChild(categorySection);
    }

    function createSiteCard(site, category) {
        const siteCard = document.createElement('a');
        siteCard.className = 'site-card';
        siteCard.href = site.url;
        siteCard.target = "_self";
        
        // Set data attributes for context menu
        Object.assign(siteCard.dataset, {
            categoryId: category.id,
            siteUrl: site.url,
            siteName: site.name,
            isBookmarkSite: String(!isNaN(parseInt(category.id)))
        });

        // Add context menu listener
        siteCard.addEventListener('contextmenu', handleSiteContextMenu);

        // Create favicon
        const faviconWrapper = document.createElement('div');
        faviconWrapper.className = 'site-favicon-wrapper';
        
        const faviconImg = document.createElement('img'); 
        faviconImg.className = 'site-favicon';
        faviconImg.alt = `${site.name} Favicon`;
        faviconImg.src = getFaviconUrl(site);
        
        // Improved error handling for favicon
        faviconImg.onerror = function() {
            if (this.src !== 'icons/default_favicon.png') {
                this.src = 'icons/default_favicon.png';
                this.alt = 'Default Favicon';
            }
        };
        
        faviconWrapper.appendChild(faviconImg);

        // Create site name
        const siteName = document.createElement('div');
        siteName.className = 'site-name';
        siteName.textContent = site.name;

        siteCard.appendChild(faviconWrapper);
        siteCard.appendChild(siteName);
        
        return siteCard;
    }

    function handleSiteContextMenu(e) {
        e.preventDefault();
        
        currentSiteForModal = { 
            categoryId: e.currentTarget.dataset.categoryId, 
            siteUrl: e.currentTarget.dataset.siteUrl, 
            siteName: e.currentTarget.dataset.siteName,
            isBookmarkSiteContext: e.currentTarget.dataset.isBookmarkSite === 'true'
        };
        
        if (setCustomIconCtxItem) {
            setCustomIconCtxItem.style.display = 'block';
        }
        
        if (customContextMenu) {
            customContextMenu.style.top = `${e.pageY}px`;
            customContextMenu.style.left = `${e.pageX}px`;
            customContextMenu.style.display = 'block';
        }
    }

    // Enhanced modal and context menu event listeners
    function setupEventListeners() {
        // Global click to hide context menu
        document.addEventListener('click', () => {
            if (customContextMenu && customContextMenu.style.display === 'block') {
                customContextMenu.style.display = 'none';
            }
        });

        // Modal close handlers
        if (modalCloseBtn && customIconModal) {
            modalCloseBtn.onclick = () => customIconModal.style.display = "none";
        }

        if (modalCancelIconBtn && customIconModal) {
            modalCancelIconBtn.onclick = () => customIconModal.style.display = "none";
        }

        // Click outside modal to close
        if (customIconModal) {
            window.onclick = (event) => {
                if (event.target === customIconModal) {
                    customIconModal.style.display = "none";
                }
            };
        }

        // Set custom icon handler
        if (setCustomIconCtxItem && customIconModal && customIconUrlInput && customContextMenu) {
            setCustomIconCtxItem.onclick = async () => {
                await handleSetCustomIcon();
            };
        }

        // Save icon handler
        if (modalSaveIconBtn && customIconModal && customIconUrlInput) {
            modalSaveIconBtn.onclick = async () => {
                await handleSaveCustomIcon();
            };
        }
    }

    async function handleSetCustomIcon() {
        if (!currentSiteForModal) return;

        try {
            customIconModal.style.display = "flex";
            const storedData = await chrome.storage.local.get('appData');
            const fullAppData = storedData.appData;
            let existingCustomUrl = '';

            if (fullAppData) {
                if (currentSiteForModal.isBookmarkSiteContext) {
                    existingCustomUrl = fullAppData.bookmarks?.iconOverrides?.[currentSiteForModal.siteUrl] || '';
                } else {
                    const cat = fullAppData.manual?.categories?.find(c => c.id === currentSiteForModal.categoryId);
                    const siteData = cat?.sites?.find(s => 
                        s.url === currentSiteForModal.siteUrl && s.name === currentSiteForModal.siteName
                    );
                    existingCustomUrl = siteData?.customIconUrl || '';
                }
            }

            customIconUrlInput.value = existingCustomUrl;
            customIconUrlInput.focus();
        } catch (error) {
            console.error("NovaTab: Error loading custom icon data:", error);
            showErrorMessage("Failed to load custom icon data");
        }

        customContextMenu.style.display = 'none';
    }

    async function handleSaveCustomIcon() {
        if (!currentSiteForModal) return;

        const newIconUrl = customIconUrlInput.value.trim();
        
        // Validate URL if provided
        if (newIconUrl && !isValidUrl(newIconUrl)) {
            alert("Please enter a valid URL (starting with http:// or https://).");
            return;
        }

        // Confirm if clearing icon
        if (!newIconUrl && !confirm("You are about to clear the custom icon. Continue?")) {
            return;
        }

        try {
            await saveCustomIconToStorage(newIconUrl);
            customIconModal.style.display = "none";
            currentSiteForModal = null;
            await debouncedLoadAndRender();
        } catch (error) {
            console.error("NovaTab: Error saving custom icon:", error);
            alert("Error saving custom icon. Please try again.");
        }
    }

    function isValidUrl(url) {
        return url.match(/^https?:\/\/.+/i);
    }

    async function saveCustomIconToStorage(newIconUrl) {
        const DEFAULT_APP_DATA_FULL = {
            activeMode: 'manual',
            manual: { categories: [], categoryOrder: [] },
            bookmarks: { folderId: null, categoryOrder: [], iconOverrides: {} }
        };

        const storageResult = await chrome.storage.local.get(['appData', 'appSettings']);
        let fullAppData = storageResult.appData || { ...DEFAULT_APP_DATA_FULL };
        const currentSettings = storageResult.appSettings || DEFAULT_SETTINGS;

        let siteUpdated = false;

        if (currentSiteForModal.isBookmarkSiteContext) {
            if (!fullAppData.bookmarks) {
                fullAppData.bookmarks = { folderId: null, categoryOrder: [], iconOverrides: {} };
            }
            if (!fullAppData.bookmarks.iconOverrides) {
                fullAppData.bookmarks.iconOverrides = {};
            }

            if (newIconUrl) {
                fullAppData.bookmarks.iconOverrides[currentSiteForModal.siteUrl] = newIconUrl;
            } else {
                delete fullAppData.bookmarks.iconOverrides[currentSiteForModal.siteUrl];
            }
            siteUpdated = true;
        } else {
            if (!fullAppData.manual) {
                fullAppData.manual = { categories: [], categoryOrder: [] };
            }

            const categoryToUpdate = fullAppData.manual.categories.find(
                cat => cat.id === currentSiteForModal.categoryId
            );

            if (categoryToUpdate?.sites) {
                const siteToUpdate = categoryToUpdate.sites.find(s => 
                    s.url === currentSiteForModal.siteUrl && s.name === currentSiteForModal.siteName
                );

                if (siteToUpdate) {
                    siteToUpdate.customIconUrl = newIconUrl;
                    siteUpdated = true;
                }
            }
        }

        if (siteUpdated) {
            const newActiveDisplayData = await generateActiveDisplayData(fullAppData);
            await chrome.storage.local.set({
                appData: fullAppData,
                activeDisplayData: newActiveDisplayData,
                appSettings: currentSettings
            });
        }
    }

    async function generateActiveDisplayData(fullAppData) {
        let newActiveDisplayData = { categories: [], categoryOrder: [] };
        const activeMode = fullAppData.activeMode || 'manual';

        if (activeMode === 'manual') {
            newActiveDisplayData.categories = (fullAppData.manual.categories || []).map(cat => ({
                ...cat,
                sites: (cat.sites || []).map(s => ({ ...s }))
            }));
            newActiveDisplayData.categoryOrder = [...(fullAppData.manual.categoryOrder || [])];
        } else if (activeMode === 'bookmarks' && fullAppData.bookmarks.folderId) {
            try {
                const tempBookmarks = await chrome.bookmarks.getChildren(fullAppData.bookmarks.folderId);
                const derivedCats = [];

                for (const folder of tempBookmarks) {
                    if (!folder.url) {
                        const sitesFromBookmark = [];
                        const bookmarksInFolder = await chrome.bookmarks.getChildren(folder.id);

                        bookmarksInFolder.forEach(bm => {
                            if (bm.url) {
                                sitesFromBookmark.push({
                                    name: bm.title,
                                    url: bm.url,
                                    customIconUrl: (fullAppData.bookmarks.iconOverrides && fullAppData.bookmarks.iconOverrides[bm.url]) || ''
                                });
                            }
                        });

                        if (sitesFromBookmark.length > 0) {
                            derivedCats.push({ id: folder.id, name: folder.title, sites: sitesFromBookmark });
                        }
                    }
                }

                newActiveDisplayData.categories = derivedCats;
                const derivedCategoryMap = new Map(derivedCats.map(c => [c.id, c]));
                let finalOrder = (fullAppData.bookmarks.categoryOrder || []).filter(id => derivedCategoryMap.has(id));

                derivedCats.forEach(cat => {
                    if (!finalOrder.includes(cat.id)) {
                        finalOrder.push(cat.id);
                    }
                });

                newActiveDisplayData.categoryOrder = finalOrder;
            } catch (error) {
                console.error("NovaTab: Error generating bookmark display data:", error);
            }
        }

        return newActiveDisplayData;
    }

    // Initialize the application
    try {
        setupEventListeners();
        await loadAndRender();
        console.log("NovaTab: Initialization completed successfully.");
    } catch (error) {
        console.error("NovaTab: Failed to initialize:", error);
        showErrorMessage("Failed to initialize NovaTab");
    }
});
```